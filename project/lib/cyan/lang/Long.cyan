package cyan.lang

final object Long
    @javacode<<<
        public long n;
        public CyLong(long n) { this.n = n; }
    >>>

    func init {
        @javacode{* n = 0; *}
    }
    

    override
    func eq:  (Dyn other) -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(n == (((CyLong ) _other).n)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }

    override
    func neq: (Dyn other) -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(n != (((CyLong ) _other).n)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }
    

    func +  (Long other) -> Long { @javacode<<< return new CyLong(n + _other.n); >>> }
    func -  (Long other) -> Long { @javacode<<< return new CyLong(n - _other.n); >>> }
    func *  (Long other) -> Long { @javacode<<< return new CyLong(n * _other.n); >>> }
    func /  (Long other) -> Long { @javacode<<< return new CyLong(n / _other.n); >>> }
    func %  (Long other) -> Long { @javacode<<< return new CyLong(n % _other.n); >>> }
    func <  (Long other) -> Boolean { @javacode<<< return new CyBoolean(n <  _other.n); >>> }
    func <= (Long other) -> Boolean { @javacode<<< return new CyBoolean(n <= _other.n); >>> }
    func >  (Long other) -> Boolean { @javacode<<< return new CyBoolean(n >  _other.n); >>> }
    func >= (Long other) -> Boolean { @javacode<<< return new CyBoolean(n >= _other.n); >>> }
    
    func <=> (Long other) -> Int {  
        if self < other { return -1 } 
        else if self > other { return 1 }
        else { 
           return 0
        }
    }
    
    func .. (Long theEnd) -> Interval<Long> {  
        return Interval<Long> new: self, theEnd
    } 
    func ..< (Long theEnd) -> Interval<Long> {  
        return Interval<Long> new: self, (theEnd - 1L);
    } 

   
    func pred -> Long {
        @javacode{* return new CyLong( n - 1 ); *}
    }

    func succ -> Long {
        @javacode{* return new CyLong( n + 1 ); *}
    }
    

    func odd -> Boolean {
        @javacode<<< return new CyBoolean(n%2 != 0); >>> 
    }
    
    func even -> Boolean {
        @javacode<<< return new CyBoolean(n%2 == 0); >>> 
    }
    
    func prime -> Boolean {
        @javacode<<< return new CyBoolean(isPrimeNumber(n)); >>> 
    
    }
    
     
   
    func maxValue -> Long {
       @javacode{* return new CyLong( Long.MAX_VALUE ); *}
    }
    

    func minValue -> Long {
       @javacode{* return new CyLong( Long.MIN_VALUE ); *}
    }
    
    
    override
    func == (Dyn other)  -> Boolean { 
        @javacode<<< 
            long other;
            if ( _other instanceof CyByte ) 
                other = ((CyByte ) _other).n;
            else if ( _other instanceof CyInt )
                other = ((CyInt ) _other).n;
            else if ( _other instanceof CyShort )
                other = ((CyShort ) _other).n;
            else if ( _other instanceof CyLong ) {
                other = ((CyLong ) _other).n;
            }
            else if ( _other instanceof CyFloat ) {
                float otherFloat = ((CyFloat ) _other).n;
                if ( (float ) n == otherFloat )
                    return CyBoolean.cyTrue;
                else
                    return CyBoolean.cyFalse;
            }
            else if ( _other instanceof CyDouble ) {
                double otherDouble = ((CyDouble ) _other).n;
                if ( (double ) n == otherDouble )
                    return CyBoolean.cyTrue;
                else
                    return CyBoolean.cyFalse;
            }
            else
                return CyBoolean.cyFalse;
                
            if ( other == (long ) n )
                return CyBoolean.cyTrue;
            else
                return CyBoolean.cyFalse;
        >>> 
    }
    
    override
    func != (Dyn other)  -> Boolean { 
        if self == other { return false } else { return true }
    }
     


    
       // all unary operators are prefixed
    func -   -> Long { @javacode<<< return new CyLong(-n); >>> }
    func +   -> Long { @javacode<<< return this; >>> }
        // and bit to bit
    func & (Long other) -> Long { @javacode<<< return new CyLong(n & _other.n); >>> }
        // or bit to bit
    func | (Long other) -> Long { @javacode<<< return new CyLong(n | _other.n); >>> }
    
        // exclusive or bit to bit
    func ~| (Long other) -> Long { @javacode<<< return new CyLong(n ^ _other.n); >>> }
        // binary not
    func ~ -> Long { @javacode<<< return new CyLong(~n); >>> }
      // left shift. The same as << in Java
    func <.< (Long other) -> Long { @javacode<<< return new CyLong(n << _other.n); >>> }
      // right shift. The same as >> in Java
    func >.> (Long other) -> Long { @javacode<<< return new CyLong(n >> _other.n); >>> }
          // right shift. The same as >>> in Java
    func >.>> (Long other) -> Long { @javacode<** return new CyLong(n >>> _other.n); **> }
    

    func |> Function<Long, Long> f -> Long {
        return f eval: self
    }
   
    func asByte   -> Byte { @javacode<<< return new CyByte( (byte) n ); >>> }
    func asInt    -> Int { @javacode<<< return new CyInt( (int ) n); >>> }
    func asShort  -> Short { @javacode<<< return new CyShort( (short) n ); >>> }
    func asFloat  -> Float { @javacode<<< return new CyFloat( (float) n ); >>> }
    func asDouble -> Double { @javacode<<< return new CyDouble( (double ) n ); >>> }
    func asChar   -> Char { @javacode<<< return new CyChar( (char ) n); >>> }
    func asBoolean -> Boolean { @javacode<<< return new CyBoolean( n == 0 ? false : true ); >>> }
    
    override
    func asString -> String { @javacode<<< return new CyString(n + ""); >>> }
    
    func to: (Long max) do: (Function<Long, Nil> b) {
        var Long i = self;
        while i <= max {
            b eval: i;
            ++i
        }
    }
    
       // injection method to be used with context object.
       // the initial value is private to injectTo
    func to: (Long max) into: (InjectObject<Long> injectTo) {
        var Long i = self;
        while i <= max {
            injectTo eval: i;
            ++i
        };
    }

    
    func times: Function<Nil> b {
        var Long i = 0Long;
        while i < self {
            b eval;
            ++i;
        }
    }
    
    func repeat: Function<Long, Nil> b {
        var Long i = 0Long;
        while i < self {
            b eval: i;
            ++i;
        }
    }

    func to: (Long max)
               inject: (Long initialValue)
               into: (Function<Long, Long, Long> b) 
               -> Long {
        var Long i = self;
        var Long total = initialValue;
        while i <= max {
            total = b eval: total, i;
            ++i
        };
        return total
    }
    func in: (Iterable<Long> container) -> Boolean {
        for item in container {
            if self == item {
                return true;
            }
        };
        return false;
    }
    
    func between: Interval<Long> inter -> Boolean {
        return self >= inter first && self <= inter last
    }
    

    override
    func hashCode -> Int { 
        @javacode<<<
            return new CyInt( new Long(n).hashCode() );
        >>>
    }
    

    func defaultValue -> Long {
        return 0L;
    }       
    
    @javacode{*
        // taken from https://java67.blogspot.com/2014/01/how-to-check-if-given-number-is-prime.html
        private static boolean isPrimeNumber(long number) {
            if (number == 2 || number == 3) {
                return true;
            }
            if (number % 2 == 0) {
                return false;
            }
            long sqrt = (long ) Math.sqrt(number) + 1;
            for (long i = 3; i < sqrt; i += 2) {
                if (number % i == 0) {
                    return false;
                }
            }
            return true;
        }
    
    *}    
    
    
end

