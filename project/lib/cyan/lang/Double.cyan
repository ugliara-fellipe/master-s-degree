package cyan.lang

public final object Double
    @javacode<<<
        public double n = 0.0;
        public CyDouble(double n) { 
            this.n = n; 
        }
    >>>

    func init {
        @javacode{* n = 0; *}
    }
    


    override
    func eq:  (Dyn other) -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(n == (((CyDouble ) _other).n)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }

    override
    func neq: (Dyn other) -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(n != (((CyDouble ) _other).n)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }
    

    func +  (Double other) -> Double { @javacode<<< return new CyDouble(n + _other.n); >>> }
    func -  (Double other) -> Double { @javacode<<< return new CyDouble(n - _other.n); >>> }
    func *  (Double other) -> Double { @javacode<<< return new CyDouble(n * _other.n); >>> }
    func /  (Double other) -> Double { @javacode<<< return new CyDouble(n / _other.n); >>> }
    func <  (Double other) -> Boolean { @javacode<<< return new CyBoolean(n <  _other.n); >>> }
    func <= (Double other) -> Boolean { @javacode<<< return new CyBoolean(n <= _other.n); >>> }
    func >  (Double other) -> Boolean { @javacode<<< return new CyBoolean(n >  _other.n); >>> }
    func >= (Double other) -> Boolean { @javacode<<< return new CyBoolean(n >= _other.n); >>> }


    func standardDoublePrecision -> Double = standardDoublePrecisionValue;
    
    shared Double standardDoublePrecisionValue = 0.001D

    func equal: Double other -> Boolean {
        @javacode{*
        if ( Math.abs(n - _other.n) < _standardDoublePrecisionValue.n ) 
            return new CyBoolean(true);
        else
            return new CyBoolean(false);
        *}
    }
    


    func equal: Double other, Double precision -> Boolean {
        @javacode{*
        if ( Math.abs(n - _other.n) < _precision.n ) 
            return new CyBoolean(true);
        else
            return new CyBoolean(false);
        *}
    }
    


   
    func maxValue -> Double {
       @javacode{* return new CyDouble( Double.MAX_VALUE ); *}
    }
    

    func minValue -> Double {
       @javacode{* return new CyDouble( Double.MIN_VALUE ); *}
    }
    
    
    override
    func == (Dyn other)  -> Boolean { 
        @javacode<<< 
            double other;
            if ( _other instanceof CyByte ) 
                other = ((CyByte ) _other).n;
            else if ( _other instanceof CyInt )
                other = ((CyInt ) _other).n;
            else if ( _other instanceof CyShort )
                other = ((CyShort ) _other).n;
            else if ( _other instanceof CyLong ) {
                other = ((CyLong ) _other).n;
            }
            else if ( _other instanceof CyFloat ) {
                double otherFloat = ((CyFloat ) _other).n;
                if ( n == otherFloat )
                    return CyBoolean.cyTrue;
                else
                    return CyBoolean.cyFalse;
            }
            else if ( _other instanceof CyDouble ) {
                double otherDouble = ((CyDouble ) _other).n;
                if ( n == otherDouble )
                    return CyBoolean.cyTrue;
                else
                    return CyBoolean.cyFalse;
            }
            else
                return CyBoolean.cyFalse;
                
            if ( other == n )
                return CyBoolean.cyTrue;
            else
                return CyBoolean.cyFalse;
        >>> 
    }
    
    override
    func != (Dyn other)  -> Boolean { 
        if self == other { return false } else { return true }
    }
     
       

    public func <=> (Double other) -> Int {  
        if self < other { return -1 } 
        else if self > other { return 1 }
        else { 
           return 0
        }
    }
    
       // all unary operators are prefixed
    public func -  -> Double { @javacode<<< return new CyDouble(-n); >>> }
    public func +  -> Double { @javacode<<< return this; >>> }

    
    func |> Function<Double, Double> f -> Double {
        return f eval: self
    }
    
    func asByte   -> Byte { @javacode<<< return new CyByte( (byte) n ); >>> }
    func asInt    -> Int { @javacode<<< return new CyInt( (int ) n ); >>> }
    func asShort  -> Short { @javacode<<< return new CyShort( (short) n ); >>> }
    func asLong   -> Long { @javacode<<< return new CyLong( (long) n); >>> }
    func asFloat  -> Float { @javacode<<< return new CyFloat( (float ) n ); >>> }
    func asChar   -> Char { @javacode<<< return new CyChar( (char ) n); >>> }
    
    override
    func asString -> String { @javacode<<< return new CyString(n + ""); >>> }

    override
    func hashCode -> Int { 
        @javacode<<<
            return new CyInt( new Double(n).hashCode() );
        >>>
    }
    
    func sqrt -> Double {
        @javacode{*
            return new CyDouble( java.lang.Math.sqrt(n) );
        *}
    }

    
    func defaultValue -> Double {
        return 0D;
    }       
    
    
end

