package cyan.lang

public final object Char


    @javacode<<<
        public char c = '\0';
        public CyChar(char c) { this.c = c; }
    >>>
 
     func init {
        @javacode{* c = '\0'; *}
    }
    

 
    override 
    func eq:  (Dyn other) -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(c == (((CyChar ) _other).c)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }

    override
    func neq: (Dyn other) -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(c != (((CyChar ) _other).c)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }
     
    func * (Int number) -> String {
        let strCh = asString;
        var String s = "";
        if number > 0 {
            number times: {
                s = s ++ strCh
            }
        }
        return s
    }


    func <  (Char other) -> Boolean {  @javacode<<< return new CyBoolean(c <  _other.c); >>> }
    func <= (Char other) -> Boolean {  @javacode<<< return new CyBoolean(c <= _other.c); >>> }
    func >  (Char other) -> Boolean {  @javacode<<< return new CyBoolean(c >  _other.c); >>> }
    func >= (Char other) -> Boolean {  @javacode<<< return new CyBoolean(c >= _other.c); >>> }

    override
    func == (Dyn other)  -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(c == (((CyChar ) _other).c)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return false;
    }
    override
    func != (Dyn other)  -> Boolean { 
        @javacode<<< 
            try {
                return new CyBoolean(c != (((CyChar ) _other).c)) ; 
            }
            catch ( ClassCastException e ) {
            }
        >>> 
        return true;
    } 
   


    func <=> (Char other) -> Int {  
         if self < other { return -1 } 
         else if self > other { return 1 }
         else { 
            return 0
         }
    }
    func .. (Char theEnd) -> Interval<Char> {  
         return Interval<Char> new: self, theEnd;
    } 
    func ..< (Char theEnd) -> Interval<Char> {  
         return Interval<Char> new: self, ((theEnd asInt) - 1) asChar;
    } 

    func pred -> Char {
        @javacode{* return new CyChar( (char ) (c - 1) ); *}
        //return  ( (Int cast: self) - 1 ) asChar;
    }

    func succ -> Char {
        @javacode{* return new CyChar( (char ) (c + 1) ); *}
        //return  ( (Int cast: self) + 1 ) asChar;
    }

    func - (Char other) -> Int {
        return (self asInt) - (other asInt);
    }
    
        
    func |> Function<Char, Char> f -> Char {
        return f eval: self
    }

    func asByte   -> Byte { @javacode<<< return new CyByte( (byte ) c); >>> }
    func asInt     -> Int { @javacode<<< return new CyInt( (int ) c); >>> }
    func asShort -> Short { @javacode<<< return new CyShort( (short ) c); >>> }
    func asLong   -> Long { @javacode<<< return new CyLong( (long ) c); >>> }
    func asBoolean -> Boolean { @javacode<<< return new CyBoolean( c == '\0' ? false : true); >>> }
    override
    func asString -> String { @javacode<<< return new CyString(c + ""); >>> }
    
    override
    func asStringQuoteIfString -> String = "'" ++ asString ++ "'";
    

    func to: (Char max) do: (Function<Char, Nil> b) {
         var Char i = self;
         while i <= max {
             b eval: i;
             ++i
         }
    }

    func in: (Iterable<Char> container) -> Boolean {
         for item in container  {
             if self == item {
                 return true;
             }
         };
         return false;
    }

    func between: Interval<Char> inter -> Boolean {
         return self >= inter first && self <= inter last
    }

    override
    func hashCode -> Int { 
        @javacode<<<
            return new CyInt(c);
        >>>
    }
    

    func isLetter -> Boolean {
        @javacode{*
            return new CyBoolean(Character.isLetter(c));
        *}
    }

    func isLowerCase -> Boolean {
        @javacode{*
            return new CyBoolean(Character.isLowerCase(c));
        *}
    }


    func isUpperCase -> Boolean {
        @javacode{*
            return new CyBoolean(Character.isUpperCase(c));
        *}
    }

    func isDigit -> Boolean {
        @javacode{*
            return new CyBoolean(Character.isDigit(c));
        *}
    }


    func isLetterOrDigit -> Boolean {
        @javacode{*
            return new CyBoolean(Character.isLetterOrDigit(c));
        *}
    }


    func isWhitespace -> Boolean {
        @javacode{*
            return new CyBoolean(Character.isWhitespace(c));
        *}
    }

    func toUpperCase -> Char {
        @javacode{*
            return new CyChar(Character.toUpperCase(c));
        *}
    }


    func toLowerCase -> Char {
        @javacode{*
            return new CyChar(Character.toLowerCase(c));
        *}
    }



    /*
       const Char ch = Char defaultValue;
       is the same as
       const Char ch = Char;
    */
    func defaultValue -> Char {
        return '\0';
    }       
    

end

